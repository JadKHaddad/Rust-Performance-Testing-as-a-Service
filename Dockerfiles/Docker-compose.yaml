version: "3.9"

networks:
  network:
    external: true
    name: network

services:
  # builder:
  #   container_name: builder
  #   image: builder
  #   build:
  #     context: ../
  #     dockerfile: ./Dockerfiles/Dockerfile.builder
  # runner:
  #   container_name: runner
  #   image: runner
  #   build:
  #     context: ../
  #     dockerfile: ./Dockerfiles/Dockerfile.runner
  redis:
    container_name: redis
    image: redis:latest
    networks: 
      - network
    restart: on-failure
  master:
    container_name: master
    build:
      context: ../
      dockerfile: ./Dockerfiles/Dockerfile.master-release
    user: root
    image: localhost:32000/master-release
    environment:
      - REDIS_HOST=redis
    volumes:
      - ./Performance-Testing-Data:/home/app/Backend/Performance-Testing-Data
    ports:
      - "3000:3000"
    networks: 
      - network
    restart: on-failure
  worker-1:
    container_name: worker_1
    build:
      context: ../
      dockerfile: ./Dockerfiles/Dockerfile.worker-release
    user: root
    image: localhost:32000/worker-release
    environment:
      - REDIS_HOST=redis
      - MASTER_IP=master:3000
      - WORKER_NAME=worker_1:5000
    volumes:
      - ./Performance-Testing-Data:/home/app/Backend/Performance-Testing-Data
    ports:
      - "5001:5000"
    networks: 
      - network
    restart: on-failure
  worker-2:
    container_name: worker_2
    build:
      context: ../
      dockerfile: ./Dockerfiles/Dockerfile.worker-release
    user: root
    image: localhost:32000/worker-release
    environment:
      - REDIS_HOST=redis
      - MASTER_IP=master:3000
      - WORKER_NAME=worker_2:5000
    volumes:
      - ./Performance-Testing-Data:/home/app/Backend/Performance-Testing-Data
    ports:
      - "5002:5000"
    networks: 
      - network
    restart: on-failure
  frontend:
    container_name: frontend
    build:
      context: ../
      dockerfile: ./Dockerfiles/Dockerfile.frontend
    image: localhost:32000/frontend
    ports:
      - "7000:80"
    networks: 
      - network
    restart: on-failure
  loadbalancer:
    container_name: loadbalancer
    build:
      context: ../
      dockerfile: ./Dockerfiles/Dockerfile.loadbalancer
    image: localhost:32000/loadbalancer
    ports:
      - "5000:80"
    networks: 
      - network
    restart: on-failure
  entrypoint:
    container_name: entrypoint
    build:
      context: ../
      dockerfile: ./Dockerfiles/Dockerfile.entrypoint
    image: localhost:32000/entrypoint
    ports:
      - "8000:80"
    networks: 
      - network
    restart: on-failure
